/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java'
    id 'maven-publish'
    id 'maven'
    id "org.springframework.boot" version "2.1.0.RELEASE"
    id 'io.freefair.lombok' version '5.3.0'
    id "io.qameta.allure" version "2.8.1"
    id 'jacoco'
}

repositories {
    mavenCentral()
    maven {
        url = uri('https://jcenter.bintray.com/')
    }
    maven {
        url = uri('https://nexus.prod.cloud.fedex.com:8443/nexus/content/repositories')
    }
    maven {
        url "https://nexus-repo.tntad.fedex.com/repository/maven-central/"
    }
    maven {
        url "https://nexus-repo.tntad.fedex.com/repository/maven-releases/"
    }
}

bootJar {
    archiveBaseName = 'spring-petclinic-rest'
}

sourceSets {
    clientCode {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/test-functional/client/java')
        }
        resources.srcDir file('src/test-functional/client/resources')
    }

    testCommon {
        java {
            compileClasspath += sourceSets.clientCode.runtimeClasspath
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/test-functional/test-common/java')
        }
    }

    junit4Test {
        java {
            compileClasspath += sourceSets.clientCode.runtimeClasspath
            compileClasspath += sourceSets.testCommon.runtimeClasspath
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/test-functional/test-junit4/java')
        }
        resources.srcDir file('src/test-functional/test-junit4/resources')
    }

    junit5Test {
        java {
            compileClasspath += sourceSets.clientCode.runtimeClasspath
            compileClasspath += sourceSets.testCommon.runtimeClasspath
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/test-functional/test-junit5/java')
        }
        resources.srcDir file('src/test-functional/test-junit5/resources')
    }

    cucumberTest {
        java {
            compileClasspath += sourceSets.clientCode.runtimeClasspath
            compileClasspath += sourceSets.testCommon.runtimeClasspath
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/test-functional/test-cucumber/java')
        }
        resources.srcDir file('src/test-functional/test-cucumber/resources')
    }
}

configurations {
    junit4TestImplementation.extendsFrom testImplementation{
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
    junit4TestRuntimeOnly.extendsFrom testRuntimeOnly{}
    junit5TestImplementation.extendsFrom testImplmentation{
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
    junit5TestRuntimeOnly.extendsFrom testRuntimeOnly {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
    cucumberTestImplementation.extendsFrom testImplementation{
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-aop:2.2.5.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-cache:2.2.5.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.2.5.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc:2.2.5.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-web:2.2.5.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-security:2.2.5.RELEASE'
    implementation 'org.springframework.data:spring-data-jdbc-core:1.2.1.RELEASE'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.10.2'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.10.2'
    implementation 'io.springfox:springfox-swagger2:2.9.2'
    implementation 'io.springfox:springfox-swagger-ui:2.9.2'
    implementation 'javax.xml.bind:jaxb-api:2.3.0'
    implementation 'org.springframework.boot:spring-boot-starter-actuator:2.2.5.RELEASE'
    implementation 'io.micrometer:micrometer-core:1.3.5'
    implementation 'io.micrometer:micrometer-registry-prometheus:1.3.5'
    runtimeOnly 'org.hsqldb:hsqldb:2.5.0'
    runtimeOnly 'mysql:mysql-connector-java:8.0.19'
    runtimeOnly 'org.postgresql:postgresql:42.2.10'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.2.5.RELEASE'
    testImplementation 'org.springframework.security:spring-security-test:5.2.2.RELEASE'
    testImplementation 'com.jayway.jsonpath:json-path:2.4.0'
    testImplementation 'org.mockito:mockito-core:3.1.0'

    clientCodeImplementation 'org.fedex.test:fedex-api-test-common:1.0'
    clientCodeImplementation 'io.rest-assured:rest-assured:4.3.2'
    clientCodeImplementation 'com.google.code.gson:gson:2.8.6'
    clientCodeImplementation 'ch.qos.logback:logback-classic:1.2.3'
    clientCodeImplementation 'org.slf4j:slf4j-api:1.7.30'

    junit4TestImplementation 'org.fedex.test:fedex-api-test-common:1.0'
    junit4TestImplementation  'org.assertj:assertj-core:3.18.1'
    junit4TestRuntimeOnly 'io.qameta.allure:allure-junit4:2.13.8'

    junit5TestImplementation 'org.fedex.test:fedex-api-test-common:1.0'
    junit5TestImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    junit5TestRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    junit5TestImplementation 'org.assertj:assertj-core:3.18.1'
    junit5TestRuntimeOnly  'io.qameta.allure:allure-junit5:2.13.8'

    cucumberTestImplementation 'org.fedex.test:fedex-api-test-common:1.0'
    cucumberTestImplementation 'io.cucumber:cucumber-core:5.7.0'
    cucumberTestImplementation 'io.cucumber:cucumber-java:5.7.0'
    cucumberTestImplementation 'io.cucumber:cucumber-junit:5.7.0'
    cucumberTestImplementation 'io.cucumber:cucumber-picocontainer:5.7.0'
    cucumberTestImplementation 'org.assertj:assertj-core:3.18.1'
    cucumberTestImplementation 'io.qameta.allure:allure-cucumber5-jvm:2.13.8'
}

group = 'spring-petclinic-rest'
version = '2.13.8'
description = 'spring-petclinic-rest'
java.sourceCompatibility = JavaVersion.VERSION_1_8

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Test){
    systemProperty 'apiUrl', apiUrl
    reports.junitXml.outputPerTestCase = true
    useJUnit {
        testLogging {
            events "passed", "failed", "skipped"
            showStandardStreams = true
            showStackTraces = true
            exceptionFormat = "full"
            afterSuite { desc, result ->
                if (!desc.parent)
                    println("${result.resultType} " +
                            "(${result.testCount} tests, " +
                            "${result.successfulTestCount} successes, " +
                            "${result.failedTestCount} failures, " +
                            "${result.skippedTestCount} skipped)")
            }
        }
    }
    outputs.upToDateWhen { false }
}

jacocoTestReport {
    reports {
        xml.enabled true
        xml.destination file("${buildDir}/libs/coverage-reports/jacoco-ut/jacoco.xml")
        csv.enabled false
        html.enabled false
    }
}

test.finalizedBy jacocoTestReport

println("api url - " + apiUrl)

task junit4Test(type: Test) {
    testClassesDirs = sourceSets.junit4Test.output.classesDirs
    classpath = sourceSets.clientCode.runtimeClasspath + sourceSets.testCommon.runtimeClasspath + sourceSets.junit4Test.runtimeClasspath
    reports.junitXml.outputPerTestCase = true
    reports.html.enabled = true

    useJUnit()
    {
        if(project.hasProperty("category")) {
            includeCategories "petclinic.api.owner.junit4.$category"
        }
        testLogging {
            events "passed", "skipped", "failed"
            showStandardStreams = true
            showStackTraces = true
            exceptionFormat = "full"

            afterSuite { desc, result ->
                if (!desc.parent) { // will match the outermost suite
                    def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                    def startItem = '|  ', endItem = '  |'
                    def repeatLength = startItem.length() + output.length() + endItem.length()
                    println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
                }
            }
        }
    }
    finalizedBy 'downloadAllure'
    ignoreFailures = true
}

task junit5Test(type: Test) {
    testClassesDirs = sourceSets.junit5Test.output.classesDirs
    classpath = sourceSets.clientCode.runtimeClasspath + sourceSets.testCommon.runtimeClasspath + sourceSets.junit5Test.runtimeClasspath
    reports.junitXml.outputPerTestCase = true
    reports.html.enabled = true

    useJUnitPlatform() {
        if (project.hasProperty("tag")) {
            includeTags "$tag"
        }
        testLogging {
            events "passed", "skipped", "failed"
            showStandardStreams = true
            showStackTraces = true
            exceptionFormat = "full"

            afterSuite { desc, result ->
                if (!desc.parent) { // will match the outermost suite
                    def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                    def startItem = '|  ', endItem = '  |'
                    def repeatLength = startItem.length() + output.length() + endItem.length()
                    println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
                }
            }
        }
    }
    finalizedBy 'downloadAllure'
    ignoreFailures = true
}


task cucumberTest(type: Test) {
    testClassesDirs = sourceSets.cucumberTest.output.classesDirs
    classpath = sourceSets.clientCode.runtimeClasspath + sourceSets.testCommon.runtimeClasspath + sourceSets.cucumberTest.runtimeClasspath
}

allure {
    version = '2.13.8'
    autoconfigure = false
    aspectjweaver = true
    clean = true
}